el css se minimiza para que tarde menos en marndarse por la red y al nevegador le tarde menos cargar


Requerimientos de Software


Con funciones anónimas podemos guardar la dirección de memoria de una función. Algo así como apuntador pero para funciones.

'''
// Definición de una función anónima y asignación a la constante `mi_funcion`
const mi_funcion = () => {
    // Esta línea imprime un mensaje en la consola
    console.log("sk.djnverne.wjkn desde una función anónima");
}

// Llamada a la función anónima `mi_funcion`
mi_funcion();
'''




¿Por qué es una buena práctica usar JavaScript para checar que sean válidos los inputs de las formas antes de enviar los datos al servidor?
-para garantizar la integridad de los datos y la seguridad frente a posibles amenazas
-mejora la experiencia de usuario
-evita los retrasos de la comunicación entre el cliente y servidor

¿Cómo puedes saltarte la seguridad de validaciones hechas con JavaScript?
-

Si te puedes saltar la seguridad de las validaciones de JavaScript, entonces ¿por qué la primera pregunta dice que es una buena práctica?
-




Alcance de proyecto:
-descartar lo que no es necesarios
-acta de proyecto: documento que reconoce formalmente la existencia de un proyecto y aporta información sobre los objetivos del proyecto y de gestión.
    -necesidades de negocio
    -descripción del producto

-enunciado del alcance: documento utilizado para desarrollar y confirmar un entendimiento común del alcance del proyecto. Debe incluir:
    -justificación del proyecto
    -producto del proyecto
    -entregables del proyecto
    -objetivos del proyecto (SMART)

-work Breakdown structures
    -"algoritmo del plan de trabajo"
    -permite ordenar y clasificar las tareas y los milestones de un proyecto bajo una jaraquía en el orden en el que 
    necesitan ser cumplidos para que se cumplan los requerimientos del proyecto.


El diagrama de casos de usos no es suficiente para definir el alcance del proyecto. Para eso usamo un Diagrama de Contexto.
-Diagrama de contexto: utilizado para identificar a los interesados en el sistema. Nos ayuda a delimitar el alcance del sistema, 
ya que se plantean las interacciones que se considerarán en el sistema. Podemos decidir si el sistema de información atenderá requerimientos de:
    -un área de la organización

Ejemplo del diagrama desglosado:
Alumnos
    A1) Registar horario (Matrícula, Carrera, Hora Inscripción, Materias, Grupos)
    A2) Consultar turno (Fecha, Hora, )





1) Identificar la situación actual/problema
2) Identificar los requisitos de información (Diagrama de Contexto)
3) Elaborar modelo conceptual (Modelo identidad relación) -> MER y EMER
4) Traducir el MER a MR. Modelo lógico (Diseño)
5) Constuir el modelo físico
    -usar interfaces
    -hacerle con código (SQL)
6) Cargar datos
    -manualmente
    -código 
    -archivos
7) Generar repores/consultas que genern valor al cliente
    -asistentes
    -código



Una política es un principio de gobierno, típicamente utilizado como la base para la definición de procedimientos
dentro de una organización.
En la medida de lo posible, procura que todo tu trabajo en el proyecto se realice con la práctica Pair Programming. 
Incluso, puedes aplicar esta práctica también en los laboratorios.

La practica de Pair Programming, básicamente consiste en que 2 personas trabajan en 1 tarea, compartiendo 1 sola pantalla y teclado.
Esto permite que el observador guíe y encuentre defectos en el momento que se inyectan, además de que ambos mejoran sus habilidades tanto de observar, como de la retroalimentación que reciben.

Para que esta práctica sea efectiva, traten de trabajar sin distracciones en periodos de alrededor de 45min + 10min de descanso,
 y ajusten conformen se sienten más cómodos y productivos.

Es indispensable un ambiente de respecto, confianza y altamente constructivo. 
El trabajo no debe realizarse para juzgar al compañero, sino para que ambos mejoren sus habilidades y para que mejore la calidad del producto.

Para el trabajo que no se realice en parejas, es posible también transferir habilidades y mejorar su calidad por medio
de las revisiones de código.

Idealmente, antes de integrar a la rama develop, es importante crear un Pull Request y asignar como revisores a 2 miembros de tu equipo.

Para los revisores, se espera que además de encontrar defectos de claridad en el código, documentación, seguridad, eficiencia, 
y buenas prácticas, apoyen a los autores en mejorar su práctica o aprendan algo de ellos. Por lo que se pide que en la revisión, 
hagan comentarios enfocados en lo que sus compañeros pueden mejorar, o en lo que aprendieron del código que revisaron.

La retroalimentación debe ser constructiva y significativa. Es decir, no se aceptarán comentarios ofensivos hacia la persona, 
ni que desprecien el trabajo. De ser necesario incluye material de apoyo como un artículo. Describe claramente lo que se puede
mejorar y cómo realizarlo, así como lo que potencialmente podría causar problemas. O bien, específicamente las lecciones aprendidas
del código que se revisó.



Diagramas de secuencia modelan el cómo se van a resolver las funcionalidades

Cuando se trabaja con bases de datos, hay dos escenarios:

1) En el proyecto se crea la base de datos desde cero
-identificar necesidad
-requisitos de información
-elaborar diagrama de Contexto
-elaborar modelo entidad relación y EMER
-elaborar modelo relacional


2) La base de datos ya existe
-normalización de base de datos


Normalizar una base de datos es re-organizar, re-estructurar para simplificar las operaciones tales como: Consultas o modificaciones

Una BD de datos que NO está NORMALIZADA tiene riesgos de anomalías, de inserción, de modificación, de eliminación y de consultas

